let hasStarted = false;

export async function startCronJobs() {
  if (hasStarted) {
    console.log("‚è© Cron d√©j√† d√©marr√©, skip.");
    return;
  }

  hasStarted = true;
  console.log("üîÅ Cron enregistr√© au d√©marrage");

  // Premier run imm√©diat
  console.log("‚è±Ô∏è Lancement du premier cron imm√©diatement...");
  runAllCrons();

  // Lancer toutes les 5 minutes
  setInterval(() => {
    console.log("üîÅ Interval d√©clench√© : lancement d'un nouveau cron.");
    runAllCrons();
  }, 1 * 30 * 1000);
}

async function runAllCrons() {
  const timestamp = new Date().toLocaleTimeString();
  console.log(`‚è∞ Cron ex√©cut√© √† ${timestamp}`);

  try {
    // === üîÑ API sync classique
    await fetch("http://localhost:3000/api/sync");
    await fetch("http://localhost:3000/api/wallet");
    await fetch("http://localhost:3000/api/state");

    // === üïõ Trigger sp√©cial l‚Äôapr√®s-midi uniquement
    const now = new Date();
    const isAfterNoon = now.getHours() >= 12;

    if (isAfterNoon) {
      const res = await fetch("http://localhost:3000/api/trigger/log");
      const { alreadyRun } = await res.json();

      if (!alreadyRun) {
        console.log(
          `[TRIGGER] üïõ updateTriggers() lanc√© √† ${now.toLocaleTimeString()}`
        );

        const updateRes = await fetch(
          "http://localhost:3000/api/trigger/update",
          {
            method: "POST",
          }
        );
        const updateData = await updateRes.json();

        if (!updateRes.ok) {
          console.error(
            "[TRIGGER] ‚ùå Erreur dans /trigger/update :",
            updateData.error
          );
          return;
        }

        const postRes = await fetch("http://localhost:3000/api/trigger/log", {
          method: "POST",
        });
        const postData = await postRes.json();

        if (!postRes.ok) {
          console.error(
            "[TRIGGER] ‚ùå Erreur dans /trigger/log :",
            postData.error
          );
        } else {
          console.log(
            `[TRIGGER] ‚úÖ updateTriggers() logg√© pour ${now
              .toISOString()
              .slice(0, 10)}`
          );
        }
      }
    }

    console.log("‚úÖ Cron termin√© avec succ√®s.\n");
  } catch (err) {
    console.error("‚ùå Erreur dans le cron :", err);
  }
}
